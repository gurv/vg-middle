import com.bmuschko.gradle.docker.DockerRegistryCredentials
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

plugins {
    id 'com.bmuschko.docker-remote-api' version '5.2.0' apply false
    id "org.sonarqube" version "2.7.1"
}

configure(rootProject) {
    group = 'io.github.gurv'
    version = '0.2.0-SNAPSHOT'

    ext {
        email = 'vladimir.gurinovich@gmail.com'
        dockerhubRegistry = 'docker.io/gurv'
        githubRegistry = 'docker.pkg.github.com/gurv/vg-middle'
        prometheusVersion = 'v2.8.1'
        prometheusWmiExporterVersion = '0.2.10'
        grafanaVersion = '5.1.4'
        h2Version = '2017-06-10'
        zookeeperVersion = '3.4.11'
        kafkaVersion = '1.1.0'
        confluentVersion = '4.1.3'
        elkVersion = '6.4.0'
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "gurv-github"
        property "sonar.projectVersion", "${project.version}"
        property "sonar.sources", "."
        property "sonar.links.ci", "https://travis-ci.org/gurv/vg-middle"
        property "sonar.links.scm", "https://github.com/gurv/vg-middle"
        property "sonar.links.issue", "https://github.com/gurv/vg-middle/issues"
    }
}

subprojects {
    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'base'
    apply plugin: 'com.bmuschko.docker-remote-api'

    ext {
        imageName = "vg-${project.name}"
        imageVersion = "latest"
    }

    docker {
        registryCredentials {
            email = rootProject.email
        }
    }

    task buildImage(type: DockerBuildImage) {
        inputDir = project.projectDir
        tags.add("${project.imageName}:${project.imageVersion}")
    }

    task tagImageDockerHub(type: DockerTagImage) {
        dependsOn buildImage
        imageId = project.imageName
        repository = "${rootProject.dockerhubRegistry}/${project.imageName}"
        tag = project.imageVersion
    }
    
    task pushImageToDockerHub(type: DockerPushImage) {
        dependsOn tagImageDockerHub
        imageName = "${rootProject.dockerhubRegistry}/${project.imageName}"
        tag = project.imageVersion
        def credentials = new DockerRegistryCredentials(project.objects)
        credentials.url.set rootProject.dockerhubRegistry
        credentials.username.set findProperty('dockerhubUsername') ?: System.getenv('CI_DOCKER_USERNAME')
        credentials.password.set findProperty('dockerhubPassword') ?: System.getenv('CI_DOCKER_PASSWORD')
        registryCredentials = credentials
    }

    task tagImageGitHub(type: DockerTagImage) {
        dependsOn buildImage
        imageId = project.imageName
        repository = "${rootProject.githubRegistry}/${project.imageName}"
        tag = project.imageVersion
    }

    task pushImageToGitHub(type: DockerPushImage) {
        dependsOn tagImageGitHub
        imageName = "${rootProject.githubRegistry}/${project.imageName}"
        tag = project.imageVersion
        def credentials = new DockerRegistryCredentials(project.objects)
        credentials.url.set rootProject.githubRegistry
        credentials.username.set findProperty('githubUsername') ?: System.getenv('GITHUB_USERNAME')
        credentials.password.set findProperty('githubToken') ?: System.getenv('GITHUB_TOKEN')
        registryCredentials = credentials
    }
}