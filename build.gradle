plugins {
    id 'com.bmuschko.docker-remote-api' version '3.2.4' apply false
}

configure(rootProject) {
    ext {
        prometheusVersion = 'v2.3.1'
        prometheusWmiExporterVersion = '0.2.10'
        grafanaVersion = '5.1.4'
        h2Version = '2017-06-10'
        zookeeperVersion = '3.4.11'
        kafkaVersion = '1.1.0'
        confluentVersion = '4.1.1'

        prometheusWmiExporter = findProperty('prometheusWmiExporter') ?: "C:/app/wmi_exporter-$prometheusWmiExporterVersion/wmi_exporter.exe"

        // готовые загружаемые (например, из Docker Hub) docker-образы, в обертке этого проекта (напримеп, wurstmeister/kafka -> gurv/vg-kafka)
        dockerProjects = [
                project(':h2'),
                project(':kafka'),
                project(':zookeeper'),
                project(':prometheus'),
                project(':grafana'),
                project(':kafka-schema-registry'),
        ]

        applicationTaskGroup = 'application'
        dockerTaskGroup = 'docker'
    }

    task upDockerCompose(type: Exec) {
        group = rootProject.dockerTaskGroup

        commandLine "docker-compose", "up"
    }
}

configure(subprojects) {
    apply plugin: 'base'

    ext {
        buildNoString = project.hasProperty('buildNo') ? "${buildNo}" : "0.1.0"
    }

    group = 'ru.gurv.vg'
    version = buildNoString
}

configure(subprojects.findAll {it.subprojects.size() == 0 }) {

    repositories {
        mavenCentral()
        jcenter()
    }

    ext {
        dockerImageName = "gurv/${rootProject.name}-${project.path.substring(1).replace(':', '-')}:latest"
        dockerContainerName = "${rootProject.name}-${project.path.substring(1).replace(':', '-')}"
        dockerImageBuildArgs = []
    }

    apply plugin: 'com.bmuschko.docker-remote-api'

    // https://github.com/bmuschko/gradle-docker-plugin/issues/467#issuecomment-353865846
    dependencies {
        dockerJava 'com.github.docker-java:docker-java:3.1.0-rc-2'
        dockerJava 'org.slf4j:slf4j-simple:1.7.5'
        dockerJava 'cglib:cglib:3.2.0'
    }
}

configure(project.dockerProjects) {
    apply plugin: 'base'
}

task dockerMonitoringStart(type: Exec, overwrite: true) {
    description = "Run monitoring"
    group = rootProject.dockerTaskGroup

    commandLine "docker-compose",
            "-f", "docker-compose.dev.monitoring.yml",
            "up",
            "-d"
}

task dockerMonitoringStop(type: Exec, overwrite: true) {
    description = "Stop monitoring"
    group = rootProject.dockerTaskGroup

    commandLine "docker-compose",
            "-f", "docker-compose.dev.monitoring.yml",
            "stop"
}